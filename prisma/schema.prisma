generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  image         String?
  username      String?   @unique
  email         String?   @unique
  bio           String?   @default("No bio yet")
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  accounts      Account[] // required by NextAuth
  sessions      Session[] // required by NextAuth
  ideas         Idea[]
  opinions      Opinion[]
  votes         Vote[]
  replies       Reply[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Idea {
  id          String    @id @default(uuid())
  title       String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  opinions    Opinion[]
}

model Opinion {
  id          String   @id @default(uuid())
  ideaId      String
  userId      String
  opinionType String
  content     String?
  createdAt   DateTime @default(now())
  idea        Idea     @relation(fields: [ideaId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  votes       Vote[]
  replies     Reply[]
}

model Vote {
  id        String   @id @default(uuid())
  opinionId String
  userId    String
  voteType  String
  createdAt DateTime @default(now())
  opinion   Opinion  @relation(fields: [opinionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([opinionId, userId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  opinionId String
  userId    String
  opinion   Opinion  @relation(fields: [opinionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
